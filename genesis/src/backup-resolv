/*
// Full copyright information is available in the file ../doc/CREDITS
//
// RFC references: inverse name resolution--1293, 903 1035 - domain name system
*/

#define _BSD 44 /* For RS6000s. */

#include "defs.h"

#ifdef __UNIX__
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#endif

#include <ctype.h>


#ifdef __UNIX__
#define INVALID_INADDR F_FAILURE
#else
#define INVALID_INADDR INADDR_NONE
#endif

#define DNS_NOERROR		0
#define DNS_INVADDR		1
#define DNS_INVADDR_STR	"Invalid IP Address"
#define DNS_NORESOLV		2
#define DNS_NORESOLV_STR	"Unable to resolv address"

int lookup_name_byip(char * chaddr, char ** out) {
   unsigned addr;
   register struct hostent *hp;

   addr = inet_addr(chaddr);
   if (addr == INVALID_INADDR)
       return DNS_INVADDR;

   if (!(hp = gethostbyaddr((char *) &addr, 4, AF_INET)))
       return DNS_NORESOLV;

   *out = hp->h_name;
   return DNS_NOERROR;
}

int lookup_ip_byname(char * chaddr, char ** out) {
   unsigned addr;
   register struct hostent *hp;

   if (!(hp = gethostbyname(chaddr)))
       return DNS_NORESOLV;

   *out = inet_ntoa(*(struct in_addr *)hp->h_addr);
   return DNS_NOERROR;
}

/* send:

 send/recv: %0.19s\t%c\t%s
       ID --^^^^^^ .^^ .^^
 Action/Response--'  .'
        String -----'
*/

#define DEBUG(_msg_) \
    printf _msg_;

void main (void) {
    char   linebuf[BIGBUF+1],
         * p,
         * result,
           code,
         * end,
         * id;
    int    status;

    while (!feof(stdin)) {
        if (!(p = fgets(linebuf, BIGBUF, stdin))) {
            print 
            return;
        while (*p && *p == ' ')
            p++;
        if (strlen(p) == 0)
            continue;

        /* trim the end */
        end = &p[strlen(p) - 1];
        while (end > p && (*end == ' ' || *end == '\n'))
            end--;
        *(end+1) = (char) NULL;

        id = p;
        while (*p && isdigit(*p))
            p++;
        if (*p != '\t') {
            DEBUG(("1st (char(*p)=>%d) != '%d' (\\t)\n", *p, '\t'));
            continue;
        }
        *p = (char) NULL;
        p++;
        code = *p;
        if (!code) {
            DEBUG(("No code.\n"));
            continue;
        }
        p++;
        if (*p != '\t') {
            DEBUG(("2st (char(*p)=>%d) != '%d' (\\t)\n", *p, '\t'));
            continue;
        }
        p++;
        switch (code) {
            case 'N': case 'n':
                if ((status = lookup_name_byip(p, &result)) == DNS_NOERROR)
                    printf("%s\tG\t%s\n", id, result);
                else if (status == DNS_INVADDR)
                    printf("%s\tN\tInvalid IP Address: %s\n", id, p);
                else
                    printf("%s\tF\tDoes not resolv: %s\n", id, p);
                break;
            case 'R': case 'r':
                if ((status = lookup_ip_byname(p, &result)) == DNS_NOERROR)
                    printf("%s\tG\t%s\n", id, result);
                else if (status == DNS_INVADDR)
                    printf("%s\tN\tInvalid IP Address: %s\n", id, p);
                else
                    printf("%s\tF\tDoes not resolv: %s\n", id, p);
                break;
            default:
            
        }
    }
}
